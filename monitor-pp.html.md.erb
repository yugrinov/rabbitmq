---
title: Monitoring and KPIs for Pre&#8209;Provisioned VMware Tanzu RabbitMQ for VMs
owner: London Services
---

<%# (Keep changes to this page in sync with monitor.html.md.erb -- especially the #rabbit-mq metrics table) %>

This topic explains how to monitor the health of the pre-provisioned version of the
<%= vars.product_full %> service using the logs, metrics, and Key Performance Indicators (KPIs)
generated by <%= vars.product_short %> component VMs.

Pre-provisioned <%= vars.product_short %> components generate many of the same metrics as the
on-demand <%= vars.product_short %> service components.
For information about the metrics for the on-demand service, see
[Monitoring and KPIs for On-Demand VMware Tanzu RabbitMQ for VMs](./monitor.html).

<%# (but with the prefix `p-rabbitmq` instead of `p.rabbitmq`.) %>

See [Overview of Logging and Metrics](https://docs.pivotal.io/application-service/loggregator/data-sources.html)
for general information about logging and metrics in <%= vars.app_runtime_full %>.

## <a id="config"></a> Setting up Syslog Forwarding

Operators can enable log forwarding by configuring an external syslog endpoint for
<%= vars.product_short %> component log entries.
For instructions for setting up syslog forwarding, see
[Configure Syslog Forwarding and Metrics Polling Interval](./install-config-pp.html#config).
If syslog forwarding is enabled, log entries with timestamps can also be found locally in
`/var/log/messages`. In any case, logs are available under `/var/vcap/sys/log/`.

## <a id="format"></a> Logging Formats

With pre-provisioned <%= vars.product_short %> logging configured, three types of
component generate logs: the RabbitMQ message server nodes, the service broker,
and HAProxy. If you have multiple server or HAProxy nodes, you can identify logs
from individual nodes by their index, which corresponds to the index of the
RabbitMQ VM instances displayed in <%= vars.ops_manager %>:

* The logs for RabbitMQ server nodes follow the format <code>[job=rabbitmq-server-partition-GUID index=X]</code>
* The logs for HAProxy nodes follow the format <code>[job=rabbitmq-haproxy-partition-GUID index=X]</code>
* The logs for the RabbitMQ service broker follow the format <code>[job=rabbitmq-broker-partition-GUID index=X]</code>

RabbitMQ and HAProxy servers log at the <code>info</code> level and capture errors, warnings, and informational messages.

<%= partial vars.path_to_partials + '/rabbitmq/log-formats' %>

## <a id="metrics"></a>Metrics

Metrics are regularly-generated log entries that report measured component states.
The metrics polling interval defaults to 30 seconds.
The **metrics polling interval** is a configuration option on the <%= vars.product_short %> tile
(**Settings** > **RabbitMQ**). Setting this interval to -1 disables metrics.
The interval setting applies to all components deployed by the tile.

Metrics are long, single lines of text that follow the format:

```mac
origin:"p-rabbitmq" eventType:ValueMetric timestamp:1616427704616569016 deployment:"cf-rabbitmq" job:"rabbitmq-broker" index:"0" ip:"10.0.4.101" tags:<key:"instance_id" value:"d4b4fd51-50de-4227-a96f-8ce636960f0b" > tags:<key:"source_id" value:"rabbitmq-broker" > valueMetric:<name:"_p_rabbitmq_service_broker_heartbeat" value:1 unit:"boolean" >
```

<p class="note">
  <strong>Note:</strong> As of <%= vars.product_short %> v2.0, the format of the metrics has changed.
  All punctuation characters in the metric name are now replaced with the underscore character.
  For example, the metric <code>/on-demand-broker/p.rabbitmq/single-node/total_instances</code> has
  become <code>_on_demand_broker_p_rabbitmq_single_node_total_instances</code>.
</p>

## <a id="kpi"></a>Key Performance Indicators

Key Performance Indicators (KPIs) for <%= vars.product_short %> are metrics that operators find most
useful for monitoring their RabbitMQ service to ensure smooth operation.
KPIs are high-signal-value metrics that can indicate emerging issues.
KPIs can be raw component metrics or derived metrics generated by applying formulas to raw metrics.

VMware provides the following KPIs as general alerting and response guidance for typical
<%= vars.product_short %> installations.
VMware recommends that operators continue to fine-tune the alert measures to their installation by
observing historical trends.
VMware also recommends that operators expand beyond this guidance and create new,
installation-specific monitoring metrics, thresholds, and alerts based on learning from their own
installations.

For a list of all <%= vars.product_short %> raw component metrics, see
[Component Metrics Reference](#reference) below.

### <a id="heartbeats"></a>Component Heartbeats

The HAProxy nodes and the service broker components periodically emit Boolean heartbeat metrics.
<code>1</code> means the system is available, and <code>0</code> or the absence of a heartbeat metric
means the service is not responding and should be investigated.

#### <a id="broker-heartbeat"></a> Service Broker Heartbeat

<table>
   <tr><th colspan="2" style="text-align: center;"><br> _p_rabbitmq_service_broker_heartbeat<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>RabbitMQ Service Broker <code>is alive</code> poll, which indicates if the component is available and able to respond to requests.<br><br>

      <strong>Use</strong>: If the Service Broker does not emit heartbeats, this indicates that it is offline. The Service Broker is required to create, update, and delete service instances, which are critical for dependent tiles such as Spring Cloud Services and Spring Cloud Data Flow.
      <br><br>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: boolean<br>
      <strong>Frequency</strong>: 30 s (default), 10 s (configurable minimum)<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 5 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: N/A<br>
      <strong>Red critical</strong>: &lt; 1</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
         Search the RabbitMQ Service Broker logs for errors.
         You can find this VM by targeting your RabbitMQ deployment with BOSH and running<br>
          <code>bosh -d service-instance_GUID vms</code>
      </td>
   </tr>
</table>

#### <a id="haproxy-heartbeat"></a> HAProxy Heartbeat

<table>
   <tr><th colspan="2" style="text-align: center;"><br> _p_rabbitmq_haproxy_heartbeat<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>RabbitMQ HAProxy <code>is alive</code> poll, which indicates if the component is available and
          able to respond to requests.<br><br>

      <strong>Use</strong>: If the HAProxy does not emit heartbeats, this indicates that it is offline. To be functional, service instances require HAProxy.
      <br><br>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: boolean<br>
      <strong>Frequency</strong>: 30 s (default), 10 s (configurable minimum)<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 5 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: N/A<br>
      <strong>Red critical</strong>: &lt; 1</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
         Search the RabbitMQ HAProxy logs for errors.
         You can find the VM by targeting your RabbitMQ deployment with BOSH and
         running the following command, which lists <code>HAProxy_GUID</code>:<br>
         <code>bosh -d service-instance_GUID vms</code>
      </td>
   </tr>
</table>

### <a id="server-kpis"></a>RabbitMQ Server KPIs

The following KPIs from the RabbitMQ server component:

#### <a id="file-descriptors"></a> File Descriptors

<table>
   <tr><th colspan="2" style="text-align: center;"><br> rabbitmq_process_open_fds<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>File descriptors consumed.<br><br>

      <strong>Use</strong>: If the number of file descriptors consumed becomes too large, the VM might lose the ability to perform disk I/O, which can cause data loss.
      <p class="note"><strong>Note</strong>: This assumes non-persistent messages are handled by retries or some other logic by the producers.</p>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: count<br>
      <strong>Frequency</strong>: 30 s (default), 10 s (configurable minimum)<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 250000 <br>
      <strong>Red critical</strong>: &gt; 280000</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>The default <code>ulimit</code> for <%= vars.product_short %> is 300000. If this metric is met or exceeded for an extended period of time, consider one of the following actions:
      <ul><li>Scaling the rabbit nodes in the tile <b>Resource Config</b> pane.</li>
      <li>Reduce the load on the server</li>
      </td>
   </tr>
</table>

#### <a id="erlang-processes"></a> Erlang Processes

<table>
   <tr><th colspan="2" style="text-align: center;"><br> erlang_vm_process_count<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td><a href="https://www.erlang.org/docs">Erlang</a> processes consumed by RabbitMQ, which runs on an Erlang VM.<br><br>

      <strong>Use</strong>: This is the key indicator of the processing capability of a node.
      <br><br>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: count<br>
      <strong>Frequency</strong>: 30 s (default), 10 s (configurable minimum)<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 900000 <br>
      <strong>Red critical</strong>: &gt; 950000</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>The default Erlang process limit in <%= vars.product_short %> v1.6 and later is 1,048,816. If this metric meets or exceeds the recommended thresholds for extended periods of time, consider scaling the RabbitMQ nodes in the tile <b>Resource Config</b> pane.
      </td>
   </tr>
</table>

### <a id="prometheus"></a> Prometheus Plugin

<%= vars.product_short %> by default enables the `rabbitmq_prometheus` plugin for pre-provisioned instances.
For more information about the plugin and monitoring RabbitMQ using Prometheus and Grafana, see the
[RabbitMQ documentation](https://www.rabbitmq.com/prometheus.html).

Prometheus-style metrics are available at `SERVICE-INSTANCE-ID:15692/metrics`.
To pull these metrics from the service instances, you must deploy and configure a Prometheus instance.

The following Prometheus scrape config discovers pre-provisioned RabbitMQ instances:

```
job_name: rabbitmq
metrics_path: "/metrics"
scheme: http
dns_sd_configs:
- names:
    - q-s4.rabbitmq-server.*.*.bosh.
  type: A
  port: 15692
```

If Prometheus is deployed with the Healthwatch v2 tile, add the configuration above
as an additional scrape job.
For more information, see [Configuring Healthwatch](https://docs.pivotal.io/healthwatch/configuring/configuring-healthwatch.html)
in the Healthwatch documentation.

<p class="note">
  <strong>Note:</strong> By default, metrics are aggregated.
  This results in a lower performance overhead at the cost of lower data fidelity.
  For more information, see the
  <a href="https://www.rabbitmq.com/prometheus.html#metric-aggregation">RabbitMQ documentation</a>.
</p>


#### <a id="per-object"></a> Scrape Per-Object Metrics

To collect metrics on a per-object scope, such as per-queue, do one of the following:

- Enable per-object metrics by setting `{rabbitmq_prometheus,[{return_per_object_metrics,true}]}`.
For instructions, see [Expert mode: Overriding RabbitMQ Server configuration](./expert-override-config.html).

- Scrape the dedicated per-object metrics endpoint, for example:

    ```
    job_name: rabbitmq
    metrics_path: "/per-object"
    scheme: http
    dns_sd_configs:
    - names:
        - q-s4.rabbitmq-server.*.*.bosh.
      type: A
      port: 15692
    ```

<p class="note">
  <strong>Note:</strong> Collecting per-object metrics on a system with many objects,
  such as queues or connections, is very slow.
  Ensure you understand the impact on your system and its load before enabling
  this on a production cluster.
</p>

#### <a id="filter-per-object"></a> Filter the Per-Object Metrics

As of <%= vars.product_short %> v2.0.7, you can collect only the per-object metrics for
certain scopes of metrics.
This decreases the performance overhead, while retaining data fidelity for metrics that you are interested in.
For more information, see [Selective querying of per-object metrics](https://github.com/rabbitmq/rabbitmq-server/tree/master/deps/rabbitmq_prometheus#selective-querying-of-per-object-metrics).

For example, the following scrape config collects only the per-object metrics that allow you to see how
many messages sit in every queue and how many consumers each of these queues have:

```
job_name: rabbitmq
metrics_path: "/metrics/detailed?family=queue_coarse_metrics&family=queue_consumer_count"
scheme: http
dns_sd_configs:
- names:
    - q-s4.rabbitmq-server.*.*.bosh.
  type: A
  port: 15692
```

### <a id="Grafana"></a> Grafana Dashboards

The RabbitMQ team has written dashboards that you can import into Grafana.
These dashboards include documentation for each metric.

* **[RabbitMQ-Overview](https://grafana.com/grafana/dashboards/10991):**
Dashboard for an overview of the RabbitMQ system

* **[Erlang-Distribution](https://grafana.com/grafana/dashboards/11352):**
Dashboard for the underlying Erlang distribution

For more information about these dashboards, see the
[RabbitMQ documentation](https://www.rabbitmq.com/prometheus.html).
If Grafana is deployed using the Healthwatch v2 tile, you can load these dashboards by selecting the
**Enable RabbitMQ dashboards** checkbox in the Healthwatch tile.

### <a id="bosh"></a> BOSH System Health Metrics

<%# The below partial is in https://github.com/pivotal-cf/docs-partials %>

<%= partial vars.path_to_partials + '/services/bosh_health_metrics_pcf2' %>

All BOSH-deployed components generate the system health metrics below.
These component metrics are from <%= vars.product_short %> components, and serve as KPIs for the <%= vars.product_short %> service.

#### <a id="ram"></a> RAM

<table>
   <tr><th colspan="2" style="text-align: center;"><br> system_mem_percent <br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>RAM being consumed by the <code>p-rabbitmq</code> VM.<br><br>

      <strong>Use</strong>: RabbitMQ is considered to be in a good state when it has little or no messages.
              In other words, "an empty rabbit is a happy rabbit."
              Alerting on this metric can indicate that there are too few consumers or apps that read messages from the queue.
      <br><br>
      Healthmonitor reports when RabbitMQ uses more than 40% of its RAM for the past ten minutes.
      <br><br>
      <strong>Origin</strong>: BOSH HM<br>
      <strong>Type</strong>: percent<br>
      <strong>Frequency</strong>: 30 s (default), 10 s (configurable minimum)<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 40 <br>
      <strong>Red critical</strong>: &gt; 50</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>Add more consumers to drain the queue as fast as possible.
      </td>
   </tr>
</table>

#### <a id="cpu"></a> CPU

<table>
   <tr><th colspan="2" style="text-align: center;"><br> system_cpu_user<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>CPU being consumed by user processes on the <code>p-rabbitmq</code> VM.<br><br>

      <strong>Use</strong>: A node that experiences context switching or high CPU usage becomes unresponsive.
      This also affects the ability of the node to report metrics.
      <br><br>
      Healthmonitor reports when RabbitMQ uses more than 40% of its CPU for the past ten minutes.
      <br><br>
      <strong>Origin</strong>: BOSH HM<br>
      <strong>Type</strong>: percent<br>
      <strong>Frequency</strong>: 30 s (default), 10 s (configurable minimum)<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 60 <br>
      <strong>Red critical</strong>: &gt; 75</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td> Remember that "an empty rabbit is a happy rabbit". Add more consumers to drain the queue as fast as possible.
      </td>
   </tr>
</table>

#### <a id="ephemeral-disk"></a> Ephemeral Disk

<table>
   <tr><th colspan="2" style="text-align: center;"><br> system_disk_ephemeral_percent<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Ephemeral Disk being consumed by the <code>p-rabbitmq</code> VM.<br><br>
      <strong>Use</strong>: If system disk fills up, there are too few consumers.
      <br><br>
      Healthmonitor reports when RabbitMQ uses more than 40% of its CPU for the past ten minutes.
      <br><br>
      <strong>Origin</strong>: BOSH HM<br>
      <strong>Type</strong>: percent<br>
      <strong>Frequency</strong>: 30 s (default), 10 s (configurable minimum)<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 60 <br>
      <strong>Red critical</strong>: &gt; 75</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>Remember that "an empty rabbit is a happy rabbit". Add more consumers to drain the queue as fast as possible.
      </td>
   </tr>
</table>

#### <a id="persistent-disk"></a> Persistent Disk

<table>
   <tr><th colspan="2" style="text-align: center;"><br> system_disk_persistent_percent<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Persistent Disk being consumed by the <code>p-rabbitmq</code> VM.<br><br>
      <strong>Use</strong>: If system disk fills up, there are too few consumers.
      <br><br>
      Healthmonitor reports when RabbitMQ uses more than 40% of its CPU for the past ten minutes.
      <br><br>
      <strong>Origin</strong>: BOSH HM<br>
      <strong>Type</strong>: percent<br>
      <strong>Frequency</strong>: 30 s (default), 10 s (configurable minimum)<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 60 <br>
      <strong>Red critical</strong>: &gt; 75</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>Remember that "an empty rabbit is a happy rabbit". Add more consumers to drain the queue as fast as possible.
      </td>
   </tr>
</table>

## <a id="reference"></a>Component Metric Reference

<%= vars.product_short %> component VMs emit the following raw metrics.
The full name of the metric follows the format: `_p_rabbitmq_COMPONENT_METRIC-NAME`

<p class="note">
  <strong>Note:</strong> As of <%= vars.product_short %> v2.0, the format of the metrics has changed.
  All punctuation characters in the metric name are now replaced with the underscore character.
  For example, the metric <code>/on-demand-broker/p.rabbitmq/single-node/total_instances</code> has
  become <code>_on_demand_broker_p_rabbitmq_single_node_total_instances</code>.
</p>

### <a id="rabbitmq-metrics"></a>RabbitMQ Server Metrics

RabbitMQ server metrics are emitted by the `rabbitmq_prometheus` plugin.
For the full list of metrics emitted, see the
[rabbitmq-server](https://github.com/rabbitmq/rabbitmq-server/blob/master/deps/rabbitmq_prometheus/metrics.md)
repository in GitHub.

### <a id="haproxy-metrics"></a>HAProxy Metrics

<%= vars.product_short %> HAProxy components emit the following metrics.

<table>
    <tr>
        <th>Name Space</th>
        <th>Unit</th>
        <th>Description</th>
    </tr>
    <tr>
        <td><code>/p-rabbitmq.haproxy.heartbeat</code></td>
        <td>boolean</td>
        <td>Indicates whether the RabbitMQ HAProxy component is available and able to respond to requests</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/haproxy/health/connections</code></td>
        <td>count</td>
        <td>The total number of concurrent front-end connections to the server</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/haproxy/backend/qsize/amqp</code></td>
        <td>size</td>
        <td>The total size of the AMQP queue on the server</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/haproxy/backend/retries/amqp</code></td>
        <td>count</td>
        <td>The number of AMQP retries to the server</td>
    </tr>
    <tr>
        <td><code>/p-rabbitmq/haproxy/backend/ctime/amqp</code></td>
        <td>time</td>
        <td>The total time to establish the TCP AMQP connection to the server</td>
    </tr>
</table>
